{% # import schema from '../schemas/sections/header' %}

{% liquid
  assign order = 'logo,menu,localization,search,mobile_search,actions'

  if shop.customer_accounts_enabled
    assign order = 'mobile_search,logo,menu,localization,search,actions'
  endif

  assign rows = 'top,bottom' | split: ','
  assign search_style = 'modal'

  assign sticky = 'always'
  assign transparent = nil


  capture logo
    content_for 'block', type: '_header-logo', id: 'header-logo'
  endcapture

  capture menu
    content_for 'block', type: '_header-menu', id: 'header-menu'
  endcapture

  capture mobile_menu
    content_for 'block', type: '_header-menu', id: 'header-menu', variant: 'mobile'
  endcapture

  capture navigation_bar
    content_for 'block', type: '_header-menu', id: 'header-menu', variant: 'navigation_bar', transparent: transparent
  endcapture

  capture actions
    render 'header-actions'
  endcapture

  if shop.customer_accounts_enabled
    assign search_class = 'mobile:hidden'
  endif

  capture search
    render 'search', style: search_style, class: search_class
  endcapture

  capture mobile_search
    render 'search', class: 'desktop:hidden', style: search_style
  endcapture

  assign show_language = localization.available_languages.size > 1
  assign show_country = localization.available_countries.size > 1

  if show_country or show_language
    capture localization_markup
      render 'dropdown-localization', show_country: show_country, show_language: show_language, country_style: true, localization_position: 'right'
    endcapture
  endif

  assign class = 'header'
%}

<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "Organization",
    "name": {{ shop.name | json }},
    {% if settings.logo %}
      "logo": {{ settings.logo | image_url: width: 500 | prepend: "https:" | json }},
    {% endif %}
    "url": {{ request.origin | append: page.url | json }}
  }
</script>

<header-component
  id="header-component"
  class="{{ class }}"
  {% if transparent %}
    transparent="{{ transparent }}"
  {% endif %}
  {% if sticky %}
    sticky="{{ sticky }}"
  {% endif %}
  data-skip-node-update
  data-scroll-direction="none"
>
  {% for row in rows %}
      {% liquid
        assign class = 'header__row header__row--' | append: row | append: ' color-primary section section--full-width-margin section--page-width'

        case row
          when 'top'
            assign first = mobile_menu
          when 'bottom'
            assign first = ''
            assign class = class | append: ' mobile:hidden'
        endcase

        assign style = ''
    %}

    {% capture content %}
      {% render 'header-row',
        row: row,
        order: order,
        first: first,
        logo: logo,
        menu: menu,
        actions: actions,
        localization: localization_markup,
        search: search,
        mobile_search: mobile_search
      %}
    {% endcapture %}

    {% assign content = content | strip %}
    {% if content != blank %}
      <div
        class="{{ class | strip }}"
        ref="headerRowTop"
        {%- if style != blank -%}
          style="{{ style | strip }}"
        {%- endif -%}
      >
        <div class="header__columns spacing-style">
          {{ content }}
        </div>
      </div>
    {% endif %}
  {% endfor %}

  {% if navigation_bar != blank %}
    <div class="header__row header__row--mobile desktop:hidden color-primary">
      {{ navigation_bar }}
    </div>
  {% endif %}
</header-component>

<script
  src="{{ 'header.js' | asset_url }}"
  type="module"
></script>

{% stylesheet %}
  body {
    --header-height: 0px;
    --header-group-height: var(--header-height);
  }

  body:has(> #header-group > header) {
    --header-height: 60px;
  }

  body:has(> #header-group:empty) {
    --header-group-height: 0px;
  }

  .header[transparent] {
    --language-button-background-color: transparent;
    --language-button-border-color: transparent;
    /* used to apply transparency to .header__row, will only ever be transparent or unset */
    --header-bg-color: transparent;
    /* used to display the appropriate logo based on transparency state */
    --header-logo-display: none;
    --header-logo-inverse-display: block;

    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    /* transparent color scheme on .header should never apply its background color */
    background-color: transparent;
    z-index: var(--layer-overlay);

    &[transparent='not-sticky'][data-sticky-state='active'],
    &:has(
        .header__row:hover,
        .mega-menu__list:is(:hover),
        .header-menu:is([aria-expanded='true']),
        nav[header-menu]:is(:focus-within),
        .menu-list__link[data-animating],
        .account-popover[open],
        .localization-wrapper:not([hidden])
      ) {
      /* should be opaque, negate all transparent properties */
      --header-logo-display: unset;
      --header-logo-inverse-display: unset;
      --header-bg-color: unset;
      --color-foreground: inherit;
      --color-background: inherit;
      --color-border: inherit;
    }

    .header__row {
      transition: color var(--animation-speed) var(--animation-easing),
        border-color var(--animation-speed) var(--animation-easing),
        background-color var(--animation-speed) var(--animation-easing);
    }
  }

  :is(
      .header[transparent]:not([data-sticky-state='active']),
      .header[transparent='always'][data-sticky-state='active'],
      .account-popover[open],
      .localization-wrapper:not([hidden])
    )
    .header__row:not(:hover):not(
      :has(
          .header-menu[aria-expanded='true'],
          .menu-list__link[data-animating],
          .account-popover[open],
          .localization-wrapper:not([hidden])
        )
    ) {
    /* while transparent, header-row ignores its color-scheme settings, pull from the header-component */
    --color-foreground: inherit;
    --color-border: inherit;
    --color-primary-button-background: inherit;
    --color-primary-button-text: inherit;
  }

  .header--inherit-color-scheme-on-menu-open:has(
      .mega-menu__list:is(:hover),
      .header-menu:is([aria-expanded='true']),
      nav[header-menu]:is(:focus-within),
      .menu-list__link[data-animating]
    )
    .header__row {
    --color-foreground: inherit;
    --color-background: inherit;
    --color-border: inherit;
  }

  .header-section {
    position: relative;
  }

  #header-group:has(#header-component[sticky]) {
    display: contents;
  }

  .header-section:has(> #header-component[sticky='always']),
  .header-section:has(> #header-component[sticky='scroll-up'][data-sticky-state='active']) {
    position: sticky;
    /* Use -1 instead of 0 so intersection observer can track sticky state */
    top: -1px;
    z-index: var(--layer-sticky);
  }

  .header[data-sticky-state] {
    transition: opacity var(--animation-speed) var(--animation-easing);
    opacity: 1;
  }

  .header[data-sticky-state='active'] {
    view-transition-name: sticky-header;
  }

  .header[data-sticky-state='idle'],
  .header[data-sticky-state='active'][data-animating] {
    opacity: 0;
  }

  .header__row {
    position: relative;
    /* will default to bg from its color scheme unless --header-bg-color is transparent */
    background-color: var(--header-bg-color, var(--color-background));
  }

  .header__row--top:not(.divider--page-width),
  .header__row--top.divider--page-width .header__columns,
  .header__row--bottom {
    border-bottom: var(--border-bottom-width) solid var(--color-border);
  }

  @media screen and (max-width: 749px) {
    .header__row--top:not(.divider--page-width),
    .header__row--top.divider--page-width .header__columns {
      border-bottom-width: var(--border-bottom-width-mobile);
    }
  }

  .header__row.divider--page-width:not(.section--page-width) .header__columns {
    @media screen and (min-width: 750px) {
      padding-inline-start: 0;
      padding-inline-end: 0;
      margin-inline-start: var(--page-margin);
      margin-inline-end: var(--page-margin);
    }
  }

  .header__column {
    display: flex;
    align-items: center;
    /* on mobile, header__column nodes are ignored to create a new grid-template-area based on all visible content */
    @media screen and (max-width: 749px) {
      display: contents;
    }
  }

  .header__column--left,
  .header__column--center {
    gap: var(--gap-xl);
    grid-area: left;
  }

  .header__column--center {
    justify-content: center;
    grid-area: center;

    header-menu:only-child .overflow-menu::part(list) {
      justify-content: center;
    }
  }

  .header__column--right {
    gap: var(--gap-xl);
    justify-content: flex-end;
    grid-area: right;

    .overflow-menu::part(list) {
      justify-content: flex-end;
    }
  }

  .header__columns {
    display: grid;
    grid-template-areas: 'left center right';
    grid-gap: var(--gap-xl);
    grid-template-columns: var(--header-template-columns);

    /* Three column layout */
    --header-left: 1fr;
    --header-center: auto;
    --header-right: 1fr;
    --header-template-columns: var(--header-left) var(--header-center) var(--header-right);

    /* Mobile layout */
    --header-mobile-bookend: 44px;

    /* If menu is in center column */
    &:has(.header__column--center header-menu) {
      --header-center: auto;
      --header-left: minmax(max-content, 1fr);
      --header-right: minmax(max-content, 1fr);
    }

    /* If there is no center column, make the column the menu is in grow eagerly */
    &:where(:not(:has(.header__column--center))) {
      @media screen and (min-width: 750px) {
        grid-template-areas: 'left right';
        --header-template-columns: var(--header-left) var(--header-right);
      }

      /* If the header-menu is in the right column */
      &:has(.header__column--right header-menu) {
        --header-right: auto;
        --header-left: minmax(max-content, 1fr);
      }
      /* If the header-menu is in the left column */
      &:has(.header__column--left header-menu) {
        --header-left: auto;
        --header-right: minmax(max-content, 1fr);
      }
    }

    @media screen and (max-width: 749px) {
      --header-template-columns: var(--header-mobile-bookend) var(--header-mobile-bookend) 1fr
        var(--header-mobile-bookend) var(--header-mobile-bookend);
      grid-template-areas: 'leftA leftB center rightA rightB';
      grid-column: span 3;
      column-gap: 0;
      align-items: center;
      padding-block: 0;
      padding-inline: 0 var(--padding-3xs);

      .header-logo {
        grid-area: center;
      }

      &:not(:has(header-actions)) .search-action {
        grid-area: leftB;
      }

      &:not(:has(.account-actions)) .search-action {
        grid-area: rightA;
      }

      .search-action {
        grid-area: leftB;
      }

      header-actions {
        grid-area: rightB;
      }
    }
  }

  /* Single column layout if there are no columns within */
  .header__columns:not(:has(.header__column)) {
    grid-template-columns: 1fr;
  }

  /* Set header paddings based on height setting */
  .header {
    --header-padding: var(--padding-sm);
    --font-paragraph--line-height: 1;
  }

  .header.header--compact {
    --header-padding: var(--padding-2xs);
  }

  .header__columns {
    --padding-block-start: var(--header-padding);
    --padding-block-end: var(--header-padding);
  }

  .header:not(.header--compact) .header__row--bottom {
    --header-padding: var(--padding-xs);
  }

  .header--collapse-row-paddings {
    .header__row--top .header__columns {
      --padding-block-end: 0px;
    }
    .header__row--bottom .header__columns {
      --padding-block-start: 0px;
    }
  }

  /* When the header is transparent, add a margin to a potential header-section below it */
  .header-section:has(.header[transparent]) + .shopify-section {
    margin-top: var(--header-height);
  }

  /* When the header is transparent, and when there is no header-section below it, offset the first main-section with
   * the height of the header
   */
  body:has(> #header-group #header-component[transparent]):not(:has(> #header-group .header-section + .shopify-section))
    > main
    > .shopify-section:first-child
    .section:not(.disable-section-top-offset) {
    &.spacing-style,
    .spacing-style {
      --section-top-offset: var(--header-height);

      /* Any nested sections should not be offset */
      :is(.spacing-style, .inherit-spacing) {
        --section-top-offset: 0px;
      }
    }

    /* Make sticky content immediately stick to the top of the page */
    .sticky-content {
      margin-top: calc(var(--header-height) * -1);
    }
  }
{% endstylesheet %}

